// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: mdt_dialout.proto

// Package implements gRPC Model Driven Telemetry service

package mdt_dialout

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GRPCMdtDialout_MdtDialout_FullMethodName = "/mdt_dialout.gRPCMdtDialout/MdtDialout"
)

// GRPCMdtDialoutClient is the client API for GRPCMdtDialout service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPCMdtDialout defines service used for client-side streaming pushing MdtDialoutArgs.
type GRPCMdtDialoutClient interface {
	MdtDialout(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MdtDialoutArgs, MdtDialoutArgs], error)
}

type gRPCMdtDialoutClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCMdtDialoutClient(cc grpc.ClientConnInterface) GRPCMdtDialoutClient {
	return &gRPCMdtDialoutClient{cc}
}

func (c *gRPCMdtDialoutClient) MdtDialout(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MdtDialoutArgs, MdtDialoutArgs], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GRPCMdtDialout_ServiceDesc.Streams[0], GRPCMdtDialout_MdtDialout_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MdtDialoutArgs, MdtDialoutArgs]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCMdtDialout_MdtDialoutClient = grpc.BidiStreamingClient[MdtDialoutArgs, MdtDialoutArgs]

// GRPCMdtDialoutServer is the server API for GRPCMdtDialout service.
// All implementations must embed UnimplementedGRPCMdtDialoutServer
// for forward compatibility.
//
// gRPCMdtDialout defines service used for client-side streaming pushing MdtDialoutArgs.
type GRPCMdtDialoutServer interface {
	MdtDialout(grpc.BidiStreamingServer[MdtDialoutArgs, MdtDialoutArgs]) error
	mustEmbedUnimplementedGRPCMdtDialoutServer()
}

// UnimplementedGRPCMdtDialoutServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGRPCMdtDialoutServer struct{}

func (UnimplementedGRPCMdtDialoutServer) MdtDialout(grpc.BidiStreamingServer[MdtDialoutArgs, MdtDialoutArgs]) error {
	return status.Errorf(codes.Unimplemented, "method MdtDialout not implemented")
}
func (UnimplementedGRPCMdtDialoutServer) mustEmbedUnimplementedGRPCMdtDialoutServer() {}
func (UnimplementedGRPCMdtDialoutServer) testEmbeddedByValue()                        {}

// UnsafeGRPCMdtDialoutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCMdtDialoutServer will
// result in compilation errors.
type UnsafeGRPCMdtDialoutServer interface {
	mustEmbedUnimplementedGRPCMdtDialoutServer()
}

func RegisterGRPCMdtDialoutServer(s grpc.ServiceRegistrar, srv GRPCMdtDialoutServer) {
	// If the following call pancis, it indicates UnimplementedGRPCMdtDialoutServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GRPCMdtDialout_ServiceDesc, srv)
}

func _GRPCMdtDialout_MdtDialout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCMdtDialoutServer).MdtDialout(&grpc.GenericServerStream[MdtDialoutArgs, MdtDialoutArgs]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GRPCMdtDialout_MdtDialoutServer = grpc.BidiStreamingServer[MdtDialoutArgs, MdtDialoutArgs]

// GRPCMdtDialout_ServiceDesc is the grpc.ServiceDesc for GRPCMdtDialout service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCMdtDialout_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mdt_dialout.gRPCMdtDialout",
	HandlerType: (*GRPCMdtDialoutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MdtDialout",
			Handler:       _GRPCMdtDialout_MdtDialout_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mdt_dialout.proto",
}
